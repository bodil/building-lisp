(asserts equality
  (= 1337 1337)
  (= 13/37 13/37)
  (= 6/2 3)
  (= 6/4 3/2)
  (= 1337.0 1337.0)
  (= "this is dog fort" "this is dog fort")
  (= '(1 3 3 7) '(1 3 3 7))
  (= '(1 3 '(3 '(7))) '(1 3 '(3 '(7))))
  (= 'symbolo 'symbolo)
  (= #t #t)
  (= #f #f))

(asserts disequality
  (not (= 1337 1338))
  (not (= 1337 1337.0))
  (not (= 1337.0 1338.0))
  (not (= 13/37 13/38))
  (not (= 'foo "foo"))
  (not (= 'foo 'food))
  (not (= "foo" "bar"))
  (not (= #t #f))
  (not (= '(1 2 3) '(1 2 4)))
  (not (= '(1 2 '(3)) '(1 2 3)))
  (not (= 1337 "1337"))
  (not (= #t 1))
  (not (= #f 0))
  (not (= #t "non-empty string"))
  (not (= #f ())))

(asserts cond-special-form
  (cond (= "foo" "bar") #f
        #t #t
        #t #f))

(asserts lists
  (= '(1 2 3) (cons 1 '(2 3)))
  (= 1 (car '(1 2 3)))
  (= '(2 3) (cdr '(1 2 3)))
  (= () (car ()))
  (= () (cdr ()))
  (= '(1) (cons 1 ())))

(asserts atomicity
  (atom? 1337)
  (atom? 0)
  (atom? "foo")
  (atom? #t)
  (atom? #f)
  (not (atom? ()))
  (not (atom? '(1 2 3))))

(asserts numeric-operators
  (= 1337 (+ 1300 37))
  (= 1337 (- 1850 513))
  (= 481 (* 13 37))
  (= 1337 (* 1337/13 13))
  (= 32 (/ 256 8))
  (= 256/8 (/ 256 8))
  (= 13/37 (/ 13 37))
  (= 5 (rem 23 6))
  (= 3/5 (rem 23/5 2))
  (< 3 5)
  (> 5 3)
  (not (< 5 3))
  (not (< 3 3))
  (not (> 3 5))
  (not (> 3 3))
  (<= 3 5)
  (<= 3 3)
  (>= 5 3)
  (>= 3 3)
  (not (<= 5 3))
  (not (>= 3 5)))

(assert basic-lambda
  (= '("omg" "lol") ((λ a → (cons a '("lol"))) "omg")))

(assert define-in-scope
  (define foo "foobar")
  (= "foobar" foo))

(assert lexical-scope
  (ƒ constantly
    a → (λ → a))
  (= "foo" ((constantly "foo"))))

(assert define-stays-in-local-scope
  (define foo "foobar")
  (ƒ bar → (define foo "barfoo"))
  (bar)
  (= foo "foobar"))

(assert currying
  (ƒ triplet a b c → (list a b c))
  (define one-and (triplet 1))
  (define one-and-two-and (one-and 2))
  (= '(1 2 3) (one-and-two-and 3)))

(assert recursion-with-recur
  (define fib (λ n → (cond
                      (<= n 1) n
                      #t (+ (recur (- n 1)) (recur (- n 2))))))
  (= 55 (fib 10)))

(assert recursion-with-named-function
  (ƒ fib n → (cond
              (<= n 1) n
              #t (+ (fib (- n 1)) (fib (- n 2)))))
  (= 55 (fib 10)))

(assert basic-pattern-matching
  (ƒ fib
    0 → 0
    1 → 1
    n → (+ (fib (- n 1)) (fib (- n 2))))
  (= 55 (fib 10)))

(ƒ foo
  (0 a) → a
  (a 0) → a
  (a b) → (list a b))

(asserts nested-pattern-matching
  (= 5 (foo '(0 5)))
  (= 5 (foo '(5 0)))
  (= '(4 5) (foo '(4 5))))

(assert iterating-pattern-matching
  (ƒ map
    f () → ()
    f (head . tail) → (cons (f head) (map f tail)))
  (= '(2 3 4) (map (λ a → (+ a 1)) '(1 2 3))))

(ƒ equals
  a a → #t
  _ _ → #f)

(asserts pattern-matching-repeating-values
  (not (equals 5 6))
  (equals 5 5))

(ƒ rember
  _ () → ()
  a (a . d) → (rember a d)
  a (b . d) → (cons b (rember a d)))

(asserts rembero
  (= '(a b d e) (rember 'c '(a b c d e))))
